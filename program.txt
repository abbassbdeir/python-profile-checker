1. mkdir python-profile-checker
Meaning: Make a new directory (folder) named python-profile-checker.

Why: This creates a dedicated folder for your project files.

2. cd python-profile-checker
Meaning: Change directory into the python-profile-checker folder.

Why: You need to be inside your project folder to work on files and run Git commands there.

3. nano profile_checker.py
Meaning: Open the nano text editor to create or edit a file named profile_checker.py.

Why: You can write or paste your Python program here directly in the terminal.

(If you prefer, you can use any text editor like VS Code, Sublime Text, or Notepad.)

4. git init
Meaning: Initialize a new Git repository in the current folder.

Why: This starts tracking changes to your files using Git version control.

5. git add profile_checker.py or git add .
Meaning: Add files to Git’s staging area.

Why: This tells Git which files you want to include in your next commit.



6. git commit -m "Initial commit: Add profile checker program"
Meaning: Save a snapshot of your staged files to Git with a message.

Why: Commits record your project history; messages explain what you changed.

7. (On GitHub) Create a repo and get the remote URL
You create a repo on GitHub’s website.

The remote URL looks like https://github.com/yourusername/python-profile-checker.git.

8. git remote add origin https://github.com/yourusername/python-profile-checker.git
Meaning: Add a remote repository called origin linked to your GitHub repo.

Why: This connects your local Git repo to GitHub, so you can push and pull code.

9. git branch -M main
Meaning: Rename the current branch to main.

Why: main is now the default primary branch name (instead of master).

10. git push -u origin main
Meaning: Push your local commits to the remote repository origin on branch main.

Why: This uploads your code to GitHub and sets the upstream tracking so future git push works simply.

Optional commands:
git status — Shows the current status of your repo, which files are staged, unstaged, or untracked.

git log — Shows the history of commits in the current branch.